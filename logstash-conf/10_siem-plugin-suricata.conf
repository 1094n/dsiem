#########################################
# SIEM suricata plugin: 1001            #
#########################################

filter {

# 1st step: identify the source log and clone it to another event with type => siem_events

  if [application] == "suricata" and [alert] {
    clone {
      clones => [ "siem_events" ]
    }

# 2nd step: remove the source log identifier from the clone, so that the clone will not 
# go through the same pipeline as the source log. Also remove the temporary type field, 
# replacing it with metadata field that will be read by the rest of siem pipeline.

    if [type] == "siem_events" {
      mutate {
        remove_field => [ "application" , "type" ]
        add_field => { 
          "[@metadata][siem_plugin_type]" => "suricata"
          "[@metadata][siem_data_type]" => "normalizedEvent"
        }
      }
    }
  }
}

# 3rd step: the actual event normalization so that it matches the format that siem expect
# this should be very plugin specific, but in general, the following field (format) are required:
# - @timestamp (date)
# - sensor (string)
# - plugin_id (integer)
# - plugin_sid (integer)
# - dst_ip (string)
# - src_ip (string)
# And these fields are optional and should be included if possible since they can be used in directive event rules:
# - dst_port (integer)
# - src_port (integer)
# - protocol (string)
# - customlabel1 (string)
# - customdata1 (string)
# - customlabel2 (string)
# - customdata2 (string)
# - customlabel3 (string)
# - customdata3 (string)
# As for other fields from the source log, they should be removed if they're not necessary for analysis. All left over fields from the source logs will be stored as is in "siem_events" elasticsearch index.

filter {
  if [@metadata][siem_plugin_type] == "suricata" {
    date {
      match => [ "timestamp", "ISO8601" ]
    }
    mutate {
      add_field => {
        "title" => "%{[alert][signature]}"
	"sensor" => "%{[host][name]}"
        "plugin_id" => 1001
        "plugin_sid" => "%{[alert][signature_id]}"
        "dst_ip" => "%{dest_ip}"
        "protocol" => "%{proto}"
        "reliability" => 1
        "priority" => "%{[alert][severity]}"
      }
    }
    mutate {
      convert => {
	"plugin_id" => "integer"
	"plugin_sid" => "integer"
	"priority" => "integer"
	"reliability" => "integer"
      }
    }
    if [dest_port] {
      mutate {
	add_field => {
	  "dst_port" => "%{dest_port}"
  	}
      }
      mutate {
	convert => {
	  "dst_port" => "integer"
	}
        remove_field => [ "dest_port" ]
      }
    }
    mutate {
      remove_field => [ "timestamp", "alert", "beat", "dest_ip", "source", "proto", "host", "event_type", "log" ]
    }
  }
}
